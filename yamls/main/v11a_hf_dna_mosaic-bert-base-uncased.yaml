# Note that some of the fields in this template haven't been filled in yet.
# Please resolve any `null` fields before launching!

# Follow the instructions in the README to set up ./my-copy-c4
# Or point data paths to your remote C4 dataset
data_local: /scratch/jbusch/ma/data/dnabert_2_pretrain/streaming4
data_remote: # If blank, files must be present in data_local

max_seq_len: 126
model_name: zhihan1996/DNABERT-2-117M
tokenizer_name: /scratch/jbusch/ma/tokenizer/hf_tokenizer/hf_dnabert_HF_5M_rc_split
mlm_probability: 0.15 # MosaicBERT should use 30% masking for optimal performance

# Run Name
run_name: MB_HF_5M_RC_150K_42_v11
# run_name: testing_streaming_dataset_with_text_column

# Model
model:
  name: mosaic_bert
  pretrained_model_name: ${model_name}
  tokenizer_name: ${tokenizer_name}
  # MosaicBERT 'base' generally uses the default architecture values for from the Hugging Face BertConfig object
  # Note: if using the pretrained_checkpoint argument to create a model from an existing checkpoint, make sure
  # the model_config settings match the architecture of the existing model
  model_config:
    num_attention_heads: 12 # bert-base default
    num_hidden_layers: 12 # bert-base default
    attention_probs_dropout_prob: 0.0 # This can be non zero with Flash Attention 2
    deterministic_fa2: false

# Dataloaders
train_loader:
  name: text
  dataset:
    local: ${data_local}
    remote: ${data_remote}
    split: train
    tokenizer_name: ${tokenizer_name}
    max_seq_len: ${max_seq_len}
    shuffle: true
    mlm_probability: ${mlm_probability}
  drop_last: true
  num_workers: 8

eval_loader:
  name: text
  dataset:
    local: ${data_local}
    remote: ${data_remote}
    split: val
    tokenizer_name: ${tokenizer_name}
    max_seq_len: ${max_seq_len}
    shuffle: false
    mlm_probability: 0.15 # We always evaluate at 15% masking for consistent comparison
  drop_last: false
  num_workers: 8

# Optimization
scheduler:
  name: linear_decay_with_warmup
  t_warmup: 0.06dur # Warmup to the full LR for 6% of the training duration
  alpha_f: 0.0 # Linearly decay to 0.02x the full LR by the end of the training duration

optimizer:
  name: decoupled_adamw
  lr: 1.0e-5 # Peak learning rate
  betas:
  - 0.9
  - 0.98
  eps: 1.0e-06
  weight_decay: 1.0e-5 # Amount of weight decay regularization
  filter_bias_norm_wd: false # If True, doesn't apply weight decay to norm layers and biases

# algorithms:

# max_duration: 286720000sp # Subsample the training data for ~275M samples
max_duration: 150000ba
eval_interval: 2000ba
# max_duration: 4ba
# eval_interval: 2ba
global_train_batch_size: 4096
# global_train_batch_size: 50

# System
seed: 42
# device_train_microbatch_size: 128
device_train_microbatch_size: auto
precision: amp_bf16

global_eval_batch_size: 256
device_eval_microbatch_size: 64
# global_eval_batch_size: 50
# device_eval_microbatch_size: 25

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 500
  lr_monitor: {}

algorithms:
  # alibi: {'max_sequence_length' : 128}
  low_precision_layernorm: {}
  # gradient_clipping:
  #   clipping_type: norm
  #   clipping_threshold: 1.0

# (Optional) W&B logging
loggers:
  wandb:
    project: modern_dnabert_pretraining     # Fill this in
    # entity:      # Fill this in

# (Optional) Checkpoint to local filesystem or remote object store
# save_interval: 3500ba
save_interval: 3500ba
save_num_checkpoints_to_keep: 5  # Important, this cleans up checkpoints saved to DISK
save_folder: /scratch/jbusch/ma/models/modern_bert/pretraining_scenario2/{run_name}/ckpt      # e.g. './{run_name}/ckpt' (local) or 's3://mybucket/mydir/{run_name}/ckpt' (remote)

# (Optional) Load from local filesystem or remote object store to
# start from an existing model checkpoint;
# e.g. './ckpt/latest-rank{rank}.pt' (local), or
# 's3://mybucket/mydir/ckpt/latest-rank{rank}.pt' (remote)
# load_path: /scratch/jbusch/ma/models/modern_bert/{run_name}/ckpt/latest-rank{rank}.pt
